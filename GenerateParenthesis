class Solution {
private:
    void helper(int n,int open,int close,vector<string>&result,string temp){
        if(open==0 ){
            while(close!=0){temp.push_back(')');
                           close--;}
            result.push_back(temp);
            return;
        }
        if(open==close){
            temp.push_back('(');
            helper(n,open-1,close,result,temp);
        }
        else{
            temp.push_back('(');
            helper(n,open-1,close,result,temp);
            temp.pop_back();
            temp.push_back(')');
            helper(n,open,close-1,result,temp);
        }
    }
    
public:
    vector<string> generateParenthesis(int n) {
        vector<string>result;
        if(n==0)return result;
        string temp;
        int open=n;
        helper(n,open,n,result,temp);
        return result;
        
    }
};
