/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    int height(TreeNode* root){
        if(root==NULL) return 0;
        int lh=height(root->left);
        int rh=height(root->right);
        return 1+max(lh,rh);
    }
    void dfs(TreeNode* root, int level,int &h,int &ans){
        if(root==NULL) return;
        if(root->left==NULL &&root->right==NULL){
            if(level==h)ans+=root->val;
            return;
        }
        dfs(root->left,level+1,h,ans);
        dfs(root->right,level+1,h,ans);
    }
public:
    int deepestLeavesSum(TreeNode* root) {
        if(root==NULL) return 0;
        int h=height(root);
        int ans=0;
        dfs(root,1,h,ans);
        return ans;
    }
};
