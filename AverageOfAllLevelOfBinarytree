/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root, int level,vector<long long int>&temp,unordered_map<int,int>&mp){
        if(root==NULL) return;
        if(temp.size()==level)temp.push_back(0);
        temp[level]+=root->val;
        mp[level]++;
        dfs(root->left,level+1,temp,mp);
        dfs(root->right,level+1,temp,mp);
        return;
    }
    vector<double> averageOfLevels(TreeNode* root) {
        if(root==NULL) return {};
        unordered_map<int,int>mp;
        vector<double> result;
        vector<long long int>temp;
        int level=0;
        dfs(root,level,temp,mp);
        for(int i=0;i<temp.size();i++){
            result.push_back((temp[i]*1.0)/mp[i]);
        }
        return result;
    }
};
