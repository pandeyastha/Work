/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
-------------------------------------------------------------------iterative-----------------------------------------------------------------------------
class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>>result;
        if(root==NULL) return {};
        queue<Node*>q;
        q.push(root);
        while(!q.empty()){
            int sz=q.size();
            vector<int>value;
            for(int i=0;i<sz;i++){
            Node* temp=q.front();
            q.pop();
            value.push_back(temp->val);
            for(auto x:temp->children)q.push(x);
            }
            result.push_back(value);
        }
        return result;
    }
};
------------------------------------------------------------------------------------------------------------------------------------------------------------


RECURSIVE-
------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    void dfs(Node* root,int level, vector<vector<int>>&result){
        if(root==NULL) return;
        if(level==result.size())result.push_back({});
        result[level].push_back(root->val);
        for(auto x:root->children)
        dfs(x,level+1,result);
        return;
    }
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>>result;
        if(root==NULL) return {};
        dfs(root,0,result);
        return result;
    }
};
