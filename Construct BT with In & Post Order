class Solution {
public: 
    TreeNode* buildTree(vector<int>& inorder,int inStart,int inEnd, vector<int>& postorder,int postStart,int postEnd,map<int,int>&mp){
        if(postStart>postEnd ||inStart>inEnd) return NULL;
        
        int inRoot=mp[postorder[postEnd]];
        int numsleft= inRoot-inStart;
        TreeNode* root= new TreeNode(inorder[inRoot]);
        root->left=buildTree(inorder,inStart,inRoot-            1,postorder,postStart,postStart+numsleft-1,mp);
        root->right=buildTree(inorder,inRoot+1,inEnd,postorder,postStart+numsleft,postEnd-1,mp);
        return root;
    
}
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size()!=postorder.size())return NULL;
        map<int,int>mp;
        for(int i=0;i<inorder.size();++i)mp[inorder[i]]=i;
        
        TreeNode* root= buildTree(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1,mp);
        return root;
    }
    
